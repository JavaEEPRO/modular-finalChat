package si.inspirited.ejb;

import org.apache.commons.lang3.StringUtils;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.servlet.http.HttpSession;

import si.inspirited.domain.entityes.Line;
import si.inspirited.domain.entityes.MessageEntity;
import si.inspirited.domain.entityes.UserEntity;
import si.inspirited.servlets.SessionService;

import java.sql.Time;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @author  Lord Jesus
 */

@Stateless
public class ChEngine {

    @PersistenceContext(unitName = "examplePU")
    private EntityManager entityManager;

    public boolean checkPassword(String data, String password){
        if(StringUtils.isEmpty(data) || StringUtils.isEmpty(password)){
            return false;
        }

        MessageEntity messageEntity = entityManager.find(MessageEntity.class, data);
        if(messageEntity == null){
            return false;
        }

        if(password.equals(messageEntity.getPassword())){
            return true;
        }

        return false;
    }

    public boolean createMessage(String data, String password){
        if(StringUtils.isEmpty(data.trim())){
            return false;
        }

        MessageEntity messageEntity = entityManager.find(MessageEntity.class, data);
        if(messageEntity != null){
            return false;
        }

        messageEntity = new MessageEntity();
        Date date = new Date();
        long time = date.getTime();
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(time);
        SimpleDateFormat format = new SimpleDateFormat("dd MMM hh:mm:ss");

        messageEntity.setData(data.trim());
        messageEntity.setTime(format.format(calendar.getTime()));
        messageEntity.setAuthor("user: ");
        messageEntity.setPassword(generateColor());
        entityManager.persist(messageEntity);

        return true;
    }

    public List<MessageEntity> getAllMessages(){
        Query query = entityManager.createQuery("select entity from MessageEntity entity");

        List<MessageEntity> rl = query.getResultList();
        List<MessageEntity> reverse = new ArrayList<MessageEntity>();

        for (MessageEntity message: rl) {
            reverse.add(0, message);
        }
        return reverse;
    }

    int i = 0;
    public String generateColor() {
        i++;
        if (i%2==0) {return "#7fffd4";}
        return "#ffe4c4";
    }

    private List<UserEntity> currentList = new ArrayList<UserEntity>();

    public UserEntity createUser() {
        UserEntity user = new UserEntity();
        Random rnd = new Random();
        String suff = rnd.nextInt(777) + "";
        user.setLogin("user" + suff);
        //SessionService service = new SessionService();
        //user.setSess(service.getSess());
        currentList.add(user);
        //return true;
        return user;
    }
    public List<UserEntity> getUserList() {
        return currentList;
    }

    public boolean userJoined(String uname) {
        String autogeneratedUname = null;
        UserEntity user = new UserEntity();
        if (uname.trim() == null) {                        //|| uname.trim() == autogeneratedUname) {}
            user.setLogin(autogeneratedLogin());
        }
        entityManager.persist(user);
        return true;
    }
    public String autogeneratedLogin() {
        Random rnd = new Random();
        return "user" + rnd.nextInt(777);
    }

    public EntityManager getEntityManager() {
        return entityManager;
    }

    public void setEntityManager(EntityManager entityManager) {
        this.entityManager = entityManager;
    }



    /*public String findUname() {
        Query query = entityManager.createQuery("select entity from UserEntity entity");
        List<UserEntity> users = query.getResultList();

        return users.get(0).getLogin();
    }*/
}